function setup() {
  angleMode(DEGREES)
  frameRate(60)
}

let smallestDimesnsion, date, miliSeconds, seconds, minutes, hours;

function draw() {
  date = new Date();
  // Adding previous element after floating point will yield smooth movement when used as an angle
  miliSeconds = date.getMilliseconds();
  seconds = date.getSeconds() + miliSeconds / 1000;
  minutes = date.getMinutes() + seconds / 60;
  hours = date.getHours() + minutes / 60;

  createCanvas(windowWidth, windowHeight);
  translate(windowWidth / 2, windowHeight / 2);
  background(21);

  if (windowHeight < windowWidth) {
    smallestDimension = windowHeight;
  } else {
    smallestDimension = windowWidth;
  }
  
  let secondAngle = map(seconds, 0, 60, 1, 359);
  let minuteAngle = map(minutes, 0, 60, 1, 359);
  let hourAngle = map(hours % 12, 0, 12, 1, 359);

  drawHoursDialO(2.4, 20, hourAngle);
  drawMinutesDialO(3, 15, minuteAngle);
  drawSecondsDialO(3.5, 10, secondAngle);
  //drawDial(2.4, 20, "teal", 49.1, 90, 3, 3.5, hourAngle)
  //drawDial(3, 15, "dodgerblue", 78, 30, 5, 3.3, minuteAngle)
  //drawDial(3.5, 10, "teal", smallestDimension/3.5, 6, 1, 2.7, secondAngle)
  drawHand(0.28);
}

function drawHand(scale) {
  push();
  noStroke();
  fill("red");
  scale = smallestDimension * scale;
  quad(-5, 0, 0, 5, 5, 0, 0, -1 * scale);
  pop();
}

function drawDial(radius, markerLength, markerColour, markerThicknessFactor, markerFrequencyFactor, textIncrement, textOffset, angle) {
  push()
  radius = smallestDimension / radius;
  rotate(-angle)
  stroke(markerColour)
  strokeWeight(radius/markerThicknessFactor)
  angleMode(DEGREES)
  let text = 0
  for (let i = 0; i < 360; ++i) {
    let interm = i - 90; // so that 0 is at top
    let x = radius * cos(interm);
    let y = radius * sin(interm);
    let x1 = (radius + markerLength) * cos(interm);
    let y1 = (radius + markerLength) * sin(interm);
    let x2 = (radius + markerLength * textOffset) * cos(interm);
    let y2 = (radius + markerLength * textOffset) * sin(interm);
    
    if(i % markerFrequencyFactor == 0) {
      drawDialText()
      text+=textIncrement
      line(x, y, x1, y1);
    }
  }
  pop()
}

function drawDialText() {
  
}

function drawSecondsDialO(radius, markerLength, angle) {
  push();
  radius = smallestDimension / radius;
  rotate(-angle);
  stroke("teal");
  strokeWeight(1);
  angleMode(DEGREES);
  let sec = 0;
  for (let i = 0; i < 360; ++i) {
    let interm = i - 90; // so that 0 is at top
    let x = radius * cos(interm);
    let y = radius * sin(interm);
    let x1 = (radius + markerLength) * cos(interm);
    let y1 = (radius + markerLength) * sin(interm);
    let x2 = (radius + markerLength * 2.7) * cos(interm);
    let y2 = (radius + markerLength * 2.7) * sin(interm);

    if (i % 6 == 0) {
      drawSecondsText(sec, x2, y2, angle, radius);
      sec++;
      line(x, y, x1, y1);
    }
  }
  pop();
}

function drawMinutesDialO(radius, markerLength, angle) {
  push();
  radius = smallestDimension / radius;
  rotate(-angle);
  stroke("dodgerblue");
  strokeWeight(radius / 78);
  angleMode(DEGREES);
  let min = 0;
  for (let i = 0; i < 360; ++i) {
    let interm = i - 90; // so that 0 is at top
    let x = radius * cos(interm);
    let y = radius * sin(interm);
    let x1 = (radius + markerLength) * cos(interm);
    let y1 = (radius + markerLength) * sin(interm);
    let x2 = (radius + markerLength * 3.3) * cos(interm);
    let y2 = (radius + markerLength * 3.3) * sin(interm);

    if (i % 30 == 0) {
      drawMinutesText(min, x2, y2, angle, radius);
      min += 5;
      line(x, y, x1, y1);
    }
  }
  pop();
}

function drawHoursDialO(radius, markerLength, angle) {
  push();
  radius = smallestDimension / radius;
  rotate(-angle);
  stroke("teal");
  strokeWeight(radius / 49.1);
  angleMode(DEGREES);
  let hour = 0;
  for (let i = 0; i < 360; ++i) {
    let interm = i - 90; // so that 0 is at top
    let x = radius * cos(interm);
    let y = radius * sin(interm);
    let x1 = (radius + markerLength) * cos(interm);
    let y1 = (radius + markerLength) * sin(interm);
    let x2 = (radius + markerLength * 3.5) * cos(interm);
    let y2 = (radius + markerLength * 3.5) * sin(interm);

    if (i % 90 == 0) {
      drawHoursText(hour, x2, y2, angle, radius);
      hour += 3;
      line(x, y, x1, y1);
    }
  }
  drawBezel(radius * 2.2);
  pop();
}

function drawSecondsText(second, x, y, angle, scale) {
  push();
  scale = scale / 15;
  if (second == 0) {
    angle = 0;
    second = "▼";
  }
  translate(x, y);
  rotate(angle);
  fill("orangered");
  noStroke();
  textSize(scale);
  textAlign(CENTER, CENTER);
  text(second, 0, 0);
  pop();
}

function drawMinutesText(minute, x, y, angle, scale) {
  push();
  scale = scale / 10;
  if (minute == 0) {
    angle = 0;
    minute = "▼";
  }
  translate(x, y);
  rotate(angle);
  fill("orange");
  noStroke();
  textSize(scale);
  textAlign(CENTER, CENTER);
  text(minute, 0, 0);
  pop();
}

function drawHoursText(hour, x, y, angle, scale) {
  push();
  scale = scale / 7;
  switch (hour) {
    case 3:
      hour = "III";
      break;
    case 6:
      hour = "VI";
      break;
    case 9:
      hour = "IX";
      break;
    case 0:
      hour = "XII";
      scale *= 1.5
      break;
  }
  translate(x, y);
  rotate(angle);
  fill("magenta");
  noStroke();
  textSize(scale);
  textAlign(CENTER, CENTER);
  text(hour, 0, 0);
  pop();
}

function drawBezel(radius) {
  push();
  noFill();
  strokeWeight(radius / 54);
  stroke("midnightblue");
  arc(0, 0, radius, radius, 10, 80);
  arc(0, 0, radius, radius, 100, 170);
  arc(0, 0, radius, radius, 190, 260);
  arc(0, 0, radius, radius, 280, 350);
  pop();
}
